openapi: 3.0.0

info:
  title: GroMIT JSON spec
  description: ASKE-E Grounded Model
  contact:
    name: Clayton T. Morrison
    email: claytonm@arizona.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 0.0.1

paths: {}

components:

  schemas:

    ### gromit

    gromit:
      title: <gromit>
      description: >
        Top-level GroMIT structure.
        A \<gromit> defines a namespace.
        \<gromit> may have metadata associated with it.
        Each \<gromit> will have its own JSON file.
      required:
        - uid
        # - entry_point  # Can be 1 or 0, but not more than one
        - types
        - objects
        - variables
        - boxes
        - metadata
      properties:
        # id
        uid:
          description: Unique identifier
          type: string
          format: uid

        # Root function
        entry_point:
          description: >
            uid for the top-level/root entry point to the GroMIT.
            There can be 1 or 0 (null) entry points, but not more than one.
            There is a separate GroMIT for each entry point.
          type: string
          format: uid

        # Types
        types:
          description: Type definitions
          type: array
          items:
            $ref: '#/components/schemas/types'

        # Objects
        objects:
          description: Instances of types
          type: array
          items:
            $ref: '#/components/schemas/objects'

        # GroMIT Structures
        variables: # node
          description: >
            Array of \<variable> definitions.
          type: array
          items:
            $ref: '#/components/schemas/variable'

        boxes:  # hyperedge and subgraph
          description: >
            Array of \<box> definitions.
          type: array
          items:
            $ref: '#/components/schemas/boxes'

        # metadata
        metadata:
          description: Metadata associated with \<gromit>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    ### Types

    types:
      oneOf:
        - $ref: '#/components/schemas/type'
        - $ref: '#/components/schemas/type__set'
        - $ref: '#/components/schemas/type__sequence'
        - $ref: '#/components/schemas/type__composite'
        - $ref: '#/components/schemas/type__dictionary'

    type:
      title: <type>
      description: Base type
      required:
        - uid
        - type
        - name
        - metatype
      properties:
        uid:
          description: Unique identifier.
          type: string
          format: uid
        type:
          description: The type of this GroMIT element
          type: string
          default: "Type"
        name:
          description: Name of the \<type>
          type: string
          default: "BaseType"
        metadata:
          description: Metadata associated with the \<type> declaration.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    type__set:
      allOf:
        - $ref: '#/components/schemas/type'
      title: <type>:<set>
      description: A set of elements.
      properties:
        name:
          type: string
          default: "Set"

    type__sequence:
      allOf:
        - $ref: '#/components/schemas/type'
      title: <type>:<sequence>
      description: A sequence of elements.
      properties:
        name:
          type: string
          default: "Sequence"

    type__composite:
      allOf:
        - $ref: '#/components/schemas/type'
      title: <type>:<composite>
      description: A structured type with named field attributes.
      required:
        - fields
      properties:
        name:
          type: string
          default: "Composite"
        fields:
          description: Array of named fields (named attributes).
          type: array
          items:
            $ref: '#/components/schemas/named_field'

    named_field:
      title: <named_field>
      description: >
        A named field, pairing the field name (string) with [optional]
        field value type name (string).
        When no type specified, the type name is null.
      required:
        - name
        - type
      properties:
        name:
          description: Name of the field.
          type: string
        type:
          description: uid of the the \<type> of the field.
          type: string
          format: uid
        metadata:
          type: array
          description: Metadata associated with the \<object> instance.
          items:
            $ref: '#/components/schemas/metadata'

    type__dictionary:
      allOf:
        - $ref: '#/components/schemas/type__composite'
      title: <type>:<dictionary>
      description: >
        Object with known keys
      required:
        - known_keys
      properties:
        name:
          type: string
          default: "Dictionary"

    ### Objects

    objects:
      oneOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/object__set'
        - $ref: '#/components/schemas/object__sequence'
        - $ref: '#/components/schemas/object__composite'
        - $ref: '#/components/schemas/object__dictionary'

    object:
      title: <object>
      description: >
        An object is an instance of a \<type> and may "evaluate" to a value.
      required:
        - uid
        - type
        - object_type
      properties:
        uid:
          description: Unique identifier.
          type: string
          format: uid
        type:
          description: The type of this GroMIT element
          type: string
          default: "Object"
        object_type:
          description: uid of the \<object>'s \<type>.
          type: string
          format: uid
        value:
          description: The value that the \<object> represents.
          type: string
        metadata:
          type: array
          description: Metadata associated with the \<object> instance.
          items:
            $ref: '#/components/schemas/metadata'

    object__set:
      allOf:
        - $ref: '#/components/schemas/object'
      title: <object>:<set>
      description: >
        An instance of a \<type>:\<set> has 0 or more elements (objects)
      properties:
        elements:
          description: The instance elements
          type: array
          items:
            $ref: '#/components/schemas/objects'

    object__sequence:
      allOf:
        - $ref: '#/components/schemas/object__set'
      title: <object>:<sequence>
      description: >
        An instance of a \<type>:\<sequence>, where elements are ordered

    object__composite:
      allOf:
        - $ref: '#/components/schemas/object'
      title: <object>:<composite>
      description: >
        An object of a \<type>:\<composite> has fields that are "instantiated"
        (as persistent storage with associated values).
      properties:
        object_type:
          type: string
          default: "Composite"
        field_bindings:
          description: >
            Array of named fields paired with values (field_value).
            Used to represent associations of fields (composite) or
            keys (dictionary) with values. Values will be strings
            reprenting the uids of objects representing the value.
          type: array
          items:
            $ref: '#/components/schemas/field_binding'

    field_binding:
      title: <field_binding>
      description: Binding a value to a named field.
      required:
        - name
        - value
      properties:
        name:
          description: The name of the field.
          type: string
        value:
          description: >
            The value bound to the field.<br>
            TODO: Generalize representation of value (object?)
          type: string

    object__dictionary:
      allOf:
        - $ref: '#/components/schemas/object__composite'
      title: <object>:<dictionary>
      description: >
        An object instance of a \<type>:\<dictionary>.
      required:
        - known_keys
      properties:
        object_type:
          type: string
          default: "Dictionary"
        known_keys:
          description: Array of known keys (strings)
          type: array
          items:
            type: string

    ### GroMIT Components

    variable:
      title: <variable>
      description: >
        A representation of a variable.
        A \<variable> can represent an abstraction by reference to an
        \<object> (e.g., representing a set, array, struct).
      # Case 1: set of variables: e.g., defines an array;
      # Case 2: random variable: function->variable
      required:
        - uid
        - name
        - metadata
      properties:
        uid:
          description: Unique identifier.
          type: string
          format: uid
        name:
          description: >
            Variable basename.
            (When derived from source code, often corresponds to
            source code identifier.)
          type: string
        object_ref:
          description: >
            Used when the \<variable> is associated with an object.
            uid of the \<object>.
          type: string
          format: uid
        metadata:
          description: Metadata associated with the \<variable>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    boxes:
      oneOf:
        - $ref: '#/components/schemas/box'
        - $ref: '#/components/schemas/box__function'
        - $ref: '#/components/schemas/box__predicate'

    box:
      title: <box>
      description: >
        A box.
      required:
        - uid
        - type
        - metadata
      properties:
        uid:
          description: Unique identifier.
          type: string
          format: uid
        name:
          description: The name of the \<box>
          type: string
        type:
          description: The type of the \<box>
          type: string
        wiring:
          description: Array of \<wiring>s "in" the \<box>
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/wiring'
              - $ref: '#/components/schemas/wiring__directed'
        metadata:
          type: array
          description: Metadata associated with the \<box>.
          items:
            $ref: '#/components/schemas/metadata'

    box__function:
      allOf:
        - $ref: '#/components/schemas/box'
      title: <box>:<function>
      description: >
        A representation of a function (transforms state).
        A \<function> is wired by a directed hyperedge between \<variables>; a \<function> may also contain a subgraph (of a Function Network (FN)).
      properties:
        type:
          description: >
            The type of function being computed by this \<function> node.<br>
            The following are three groups of types:<br>
            <em>Compound object reference</em>: [ \"EXTRACT\", \"PACK\" ]<br>
            <em>executable + instances (wiring)</em>: [ \"OPERATOR\", \"LITERAL\", \"ASSIGN\", \"CONDITION\", \"DECISION\" ]<br>
            <em>containers</em>: [ \"CONTAINER\", \"CONDITIONAL\", \"LOOP\" ]
          type: string
          enum: [ EXTRACT, PACK,
                  OPERATOR, LITERAL, ASSIGN,  CONDITION, DECISION,
                  CONTAINER, CONDITIONAL, LOOP ]
        input_variables:
          description: >
            Array of zero or more uids for variables <em>within</em> the function body.<br>
            Order of variables will match BOTH:<br>
            (1) The order of the parent \<hyper_edge> input variable uids<br>
            (2) The order of the inputs to the executable expression lambda function.
          type: array
          items:
            type: string
            format: uid
        output_variables:
          description: >
            Array of zero or more uids for variables <em>within</em> the function body.<br>
            Order of variables will match BOTH:<br>
            (1) The order of the parent \<hyper_edge> output variable uids<br>
            (2) The order of the outputs in the return tuple of the executable expression lambda function.
          type: array
          items:
            type: string
            format: uid
        expression:
          description: >
            Executable expression.
            Stringified pythonic version of the lambda function code
          type: string
        exit:
          description: >
            Only used in loop type.
            Unique identifier for the lambda function that computes the exit condition.
          type: string

    box__predicate:
      allOf:
        - $ref: '#/components/schemas/box__function'
      title: <box>:<predicate>
      description: >
        A representation of a predicate: asserts a relation is True
      properties:
        expression:
          description: >
            Executable expression that returns a truth value.
            Stringified pythonic version of the lambda function code.

    wiring:
      title: <wiring>
      description: Top-level wiring

    wiring__directed:
      allOf:
        - $ref: '#/components/schemas/wiring'
      title: <wiring>:<directed>
      description: Function Network directed hyper edge
      required:
        - input_variables
        - function_uid
        - output_variables
      properties:
        input_variables:
          description: Array of uids for all input \<variable>s
          type: array
          items:
            type: string
            format: uid
        function_uid:
          description: uid of \<function>
          type: string
          format: uid
        output_variables:
          description: Array of uids for all output \<variable>s
          type: array
          items:
            type: string
            format: uid

    ### metadata

    metadata:
      title: <metadata>
      description: >
        Typed metadata.
        \<gromit> is grounded through metadata.<br>


    ### gromit_collection

    gromit_collection:
      title: <gromit_collection>
      description: >
        A collection of 1 or more \<gromit>.
        \<node_set>s denote arbitrary subsets of \<gromit>.
        A collection with an \<alignment> will have at least two \<gromit>.
        Each \<gromit_collection> will have its own JSON file.
      required:
        - gromits
      properties:
        gromits:
          description: Array of \<gromit> ids.
          type: array
          items:
            type: string
            format: uid
        alignments:
          type: array
          items:
            $ref: '#/components/schemas/alignment'
        node_sets:
          type: array
          items:
            $ref: '#/components/schemas/node_set'

    alignment:
      title: <alignment>
      description: >
        A mapping of elements (node_ids or \<node_sets>)
        from one \<gromit> (gromit_1) to another (gromit_2).
        The elements in the map are paired by their array index.
      required:
          - gromit_1
          - gromit_1_elements
          - gromit_2
          - gromit_2_elements
      properties:
        gromit_1:
          description: uid for <gromit> source 1
          type: string  # gromit_id
          format: uid
        gromit_1_elements:
          description: Array of uids for node_id or node_set_id from \<gromit> source 1
          type: array
          items:
            type: string # node_id or node_set_id
            format: uid
        gromit_2:
          description: gromit_id for \<gromit> source 2
          type: string  # gromit_id
          format: uid
        gromit_2_elements:
          description: Array of uids for node_id or node_set_id from \<gromit> source 2
          type: array
          items:
            type: string # node_id or node_set_id
            format: uid

    node_set:
      title: <node_set>
      description: >
        A collection of GroMIT node_ids from a source \<gromit>,
        used to denote to an arbitrary subset of the GroMIT.
        A \<node_set> may have metadata associated with it.
      required:
        - node_set_id
        - gromit_id
        - nodes
      properties:
        node_set_id:
          description: Unique identifier.
          type: string
          format: uid
        gromit_id:
          description: The uid of the source \<gromit>.
          type: string
          format: uid
        nodes:
          description: >
            Array of uids representing \<variable> and/or \<function> nodes.
          type: array
          items:
            type: string
            format: uid
        metadata:
          description: Metadata associated with the \<node_set>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'
