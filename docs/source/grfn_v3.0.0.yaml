openapi: 3.0.0

info:
  title: GrFN JSON spec
  description: AutoMATES Grounded Function Network (GrFN) JSON schema specification
  contact:
    name: Clayton T. Morrison
    email: claytonm@arizona.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 3.0.0

paths: {}

components:

  schemas:

    ### grfn

    grfn:
      title: <grfn>
      description: >
        Top-level GrFN structure.
        A \<grfn> corresponds to a namespace.
        Contains: \<variable> and \<function> node definitions,
          \<instance> map defining map from node_ids to instance_ids,
          and \<edge> definitions for wiring between variables and functions.
          <instance_ids> represents the node_ids for top-level \<grfn> FN
          (function nodes may recursively define subnetwork FNs).
        \<grfn> may have metadata associated with it.
        Each \<grfn> will have its own JSON file.
      required:
        - uid
        # - entry_point  # Can be 1 or 0, but not more than one
        - types
        - objects
        - variables
        - functions
        - hyper_edges
        # - instances
        # - instance_ids
        - metadata
      properties:
        # id
        uid:
          description: Unique identifier
          type: string
        # Root function
        entry_point:
          description: >
            uid for the top-level/root entry point to the GrFN.
            There can be 1 or 0 (null) entry points, but not more than one.
            There is a separate GrFN for each entry point.
          type: string
        # Types
        types:
          description: Type definitions
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/type'
              - $ref: '#/components/schemas/type__composite'
        objects:
          description: Instances of types
          type: array
          items:
            $ref: '#/components/schemas/object'
        # Function Network Definitions
        variables: # node
          description: >
            Array of \<variable> definitions.
          type: array
          items:
            $ref: '#/components/schemas/variable'
        functions:  # hyperedge and subgraph
          description: >
            Array of \<function> definitions.
          type: array
          items:
            $ref: '#/components/schemas/function'

        # hyper_edges:
        #   description: >
        #     Array of all \<hyper_edge> definitions, which connect variables to function
        #     input/output interfaces.
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/hyper_edge'

        # instances:
        #   description: >
        #     Array of all \<instance> definitions.
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/instance'

        # Top level FN Instances
        # instance_ids:
        #   description: >
        #     Array of all instance_ids for \<variable> and \<function>
        #     instances in the \<grfn> top-level Function Network.
        #   type: array
        #   items:
        #     type: string

        # metadata
        metadata:
          description: Metadata associated with \<grfn>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'


    ### Function Network Components

    variable:
      title: <variable>
      description: >
        A representation of a variable (represents state).
        A \<variable> can represent an abstraction, with instance_ids
          denoting a set of \<variable> and \<function> instances.
          Case 1: set of variables: e.g., defines an array;
          Case 2: random variable: function->variable
      required:
        - uid
        - name
        # - instance_ids
        # - instance_count
        - metadata
      properties:
        uid:
          description: Unique identifier.
          type: string
        object_ref:
          description: uid of host object (if applicable)
          type: string
        identifier:
          description: >
            Variable basename and index.
            Typically derived from the source code identifier.
          type: string

        # instance_ids:
        #   description: >
        #     Array of all instance_ids for \<variable> and \<function>
        #     instances of this \<variable>.
        #   type: array
        #   items:
        #     type: string

        metadata:
          description: Metadata associated with the \<variable>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    function:
      title: <function>
      description: >
        A representation of a function (transforms state).
        A \<function> is a hyperedge and a subgraph of a FN.
      required:
        - uid
        - type
        - hyper_edges
        - metadata
      properties:
        uid:
          description: Unique identifier.
          type: string
        identifier:
          description: The name of the function
          type: string
        type:
          description: >
            The type of function being computed by this \<function> node.<br>
            The following are three groups of types:<br>
            <em>Compound object reference</em>: [ \"EXTRACT\", \"PACK\" ]<br>
            <em>executable + instances (wiring)</em>: [ \"OPERATOR\", \"LITERAL\", \"ASSIGN\", \"CONDITION\", \"DECISION\" ]<br>
            <em>containers</em>: [ \"CONTAINER\", \"CONDITIONAL\", \"LOOP\" ]
          type: string
          enum: [ EXTRACT, PACK,
                  OPERATOR, LITERAL, ASSIGN,  CONDITION, DECISION,
                  CONTAINER, CONDITIONAL, LOOP ]
        input_variables:
          description: >
            Array of zero or more uids for variables within the function body.<br>
            Order of variables will match BOTH<br>
            (1) The order of the parent \<hyper_edge> input_variable_uids<br>
            (2) The order of the inputs to the executable expression lambda function.
          type: array
          items:
            type: string
        output_variables:
          description: >
            Array of zero or more uids for variables within the function body.<br>
            Order of variables will match BOTH<br>
            (1) The order of the parent \<hyper_edge> output_variable_uids<br>
            (2) The order of the outputs in the return tuple of the executable expression lambda function.
          type: array
          items:
            type: string
        expression:
          description: >
            Executable expression.
            Stringified pythonic version of the lambda function code
          type: string
        exit:
          description: >
            Only used in loop type.
            Unique identifier for the lambda function that computes the exit condition.
          type: string
        hyper_edges:
          description: >
            Array of \<hyper_edge>s representing the body of the function
          type: array
          items:
            $ref: '#/components/schemas/hyper_edge'
        # instance_ids:
        #   description: >
        #     Array of all instance_ids for <variable> and \<function>
        #     instances in this \<function_network>.
        #   type: array
        #   items:
        #     type: string
        metadata:
          type: array
          description: Metadata associated with the \<function>.
          items:
            $ref: '#/components/schemas/metadata'

    hyper_edge:
      title: <hyper_edge>
      description: Function Network hyper edge
      required:
        - input_variables
        - function_uid
        - output_variables
      properties:
        input_variables:
          description: Array of uids for all input \<variable>s
          type: array
          items:
            type: string
        function_uid:
          description: uid of \<function>
          type: string
        output_variables:
          description: Array of uids for all output \<variable>s
          type: array
          items:
            type: string

    # indexed_uid:
    #   title: <indexed_uid>
    #   description: >
    #     References to \<variable> instances by the base \<variable> uid
    #     and the instance index.
    #   required:
    #     - uid
    #     - index
    #   properties:
    #     variable_uid:
    #       description: \<variable> uid
    #       type: string
    #     index:
    #       description: \<variable> instance index
    #       type: integer


    # instance:
    #   title: <instance>
    #   description: >
    #     Map of node_id (of either a \<variable> or \<function> node)
    #       to node instance_id.
    #     NOTE: both node types are included in the same pool of unique
    #       node_id and instance_id's.
    #   properties:
    #     name:
    #       description: >
    #         The name of the code identifier used for this instance.
    #         Why this is different from the original variable definition name:
    #         an example: an outer scope could define a variable identifier
    #         named 'x' and then x is passed as an argument to a
    #         function/subroutine with a parameter 'y'; here, the parameter
    #         is really an instance of 'x', and the *instance* of that variable
    #         in the subroutine is named 'y'. So if this were the instance of
    #         'y', then it will have the name 'y'. But the instance will be
    #         linked to the variable definition for 'x'.
    #       type: string
    #     node_id:
    #       description: >
    #         The id of either a \<variable> or \<function> node defintion.
    #       type: string
    #     instance_id:
    #       description: >
    #         The id of a node instance.
    #       type: string

    ### Types

    type:
      title: <type>
      description: Base type
      required:
        - uid
        - name
        - metatype
      properties:
        uid:
          description: Unique identifier.
          type: string
        name:
          description: Name of the data type
          type: string
        metatype:
          description: Metatype of type.
          type: string
        metadata:
          description: Metadata associated with the \<type> declaration.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    type__composite:
      allOf:
        - $ref: '#/components/schemas/type'
      title: <type>:<composite>
      description: A structured type with named field attributes.
      required:
        - fields
      properties:
        metatype:
          type: string
          default: "COMPOSITE"
        fields:
          description: Array of named fields.
          type: array
          items:
            $ref: '#/components/schemas/named_field'

    named_field:
      title: <named_field>
      description: >
        A named field, pairing the field name (string) with [optional]
        field value type name (string).
        When no type specified, the type name is null.
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          type: string
        metadata:
          type: array
          description: Metadata associated with the \<object> instance.
          items:
            $ref: '#/components/schemas/metadata'

    object:
      title: <object>
      description: >
        An object an instance of a \<type> where fields are instantiated
        as persistent storage with associated values.
        Each field is represented by a variable.
      properties:
        uid:
          description: Unique identifier object.
          type: string
        type:
          description: uid of the \<object>'s \<type>
          type: string
        field_refs:
          description: >
            Array of name-value pairs (attributes). Used to represent associations of fields (composite) or keys (dictionary) with values. Values will be strings reprenting the uids of objects representing the value.
          type: array
          items:
            $ref: '#/components/schemas/attribute'
        metadata:
          type: array
          description: Metadata associated with the \<object> instance.
          items:
            $ref: '#/components/schemas/metadata'

    attribute:
      title: <attribute>
      description: An attribute-value pair.
      required:
        - name
        - value
      properties:
        type:
          default: "attribute"
        name:
          description: The name of the attribute.
          type: string
        value:
          description: The value of the attribute.
          type: string

    object__dictionary:
      allOf:
        - $ref: '#/components/schemas/object'
      title: <object>:<dictionary>
      description: >
        Object with known keys
      properties:
        type:
          type: string
          default: "DICTIONARY"
        known_keys:
          description: Array of known keys (strings)
          type: array
          items:
            type: string

    # composite_type:
    #   title: <composite_type>
    #   description: TODO
    #   required:
    #     - id
    #     # - built_in
    #     - name
    #   properties:
    #     id:
    #       description: Unique identifier.
    #       type: string
    #     # built_in:
    #     #   description: TODO
    #     #   type: boolean
    #     name::
    #       description: Name of the data type
    #       type: string
    #     fields:
    #       description: >
    #         Array of field-name (string) paired with optional type-name (string).
    #         When no type specified, the type-name is empty-string.
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/attribute'
    #     metadata:
    #       description: Metadata associated with the \<type> declaration.
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/metadata'
    #
    # object:
    #   title: <object>
    #   description: >
    #     An object an instance of a \<type> where fields are instantiated
    #     as persistent storage with associated values.
    #     Each field is represented by a variable.
    #   properties:
    #     id:
    #       description: Unique identifier.
    #       type: string
    #     type:
    #       description: TODO
    #       type: string
    #     instance_ids:
    #       description: >
    #         Array of field instance_ids
    #       type: array
    #       items:
    #         type: string
    #     field_instances:
    #       description: >
    #         Array of pairs of \<field_operation>: \<field instance_id>, \<operation_spec>
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/attribute'
    #     metadata:
    #       type: array
    #       description: Metadata associated with the \<object> instance.
    #       items:
    #         $ref: '#/components/schemas/metadata'

    ### metadata

    metadata:
      title: <metadata>
      description: >
        Typed metadata consisting of an array of attribute-value pairs.
        \<grfn> is grounded through metadata.<br>
        See grfn_openapi_metadata

    # metadata:
    #   title: <metadata>
    #   description: >
    #     Typed metadata consisting of an array of attribute-value pairs.
    #     \<grfn> is grounded through metadata.
    #   required:
    #     - type
    #     - attributes
    #   properties:
    #     type:
    #       description: Type of metadata.
    #       type: string
    #     provenance:
    #       description: Provenance of metadata.
    #       $ref: '#/components/schemas/provenance'
    #     attributes:
    #       description: Array of \<attribute> attribute-value pairs.
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/attribute'
    #
    # provenance:
    #   title: <provenance>
    #   description: Provenance of data.
    #   required:
    #     - method
    #     - date_time
    #   properties:
    #     method:
    #       description: >
    #         The (top-level) inference method (with version) used to derive data.
    #       type: string
    #     date_time:
    #       description: >
    #         Date and time that current GrFN was generated.
    #       type: string
    #       format: date-time
    #     source:
    #       description: >
    #         Array of attributes pairing source type (name) with source identifier (value).
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/attribute'
    #
    # attribute:
    #   title: <attribute>
    #   description: An attribute-value pair.
    #   required:
    #     - name
    #     - value
    #   properties:
    #     name:
    #       description: The name of the attribute.
    #       type: string
    #     value:
    #       description: The value of the attribute.
    #       type: string

    ### grfn_collection

    grfn_collection:
      title: <grfn_collection>
      description: >
        A collection of 1 or more \<grfn>.
        \<node_set>s denote arbitrary subsets of \<grfn>.
        A collection with an \<alignment> will have at least two \<grfn>.
        Each \<grfn_collection> will have its own JSON file.
      required:
        - grfns
      properties:
        grfns:
          description: Array of \<grfn> ids.
          type: array
          items:
            type: string
        alignments:
          type: array
          items:
            $ref: '#/components/schemas/alignment'
        node_sets:
          type: array
          items:
            $ref: '#/components/schemas/node_set'

    alignment:
      title: <alignment>
      description: >
        A mapping of elements (node_ids or \<node_sets>)
        from one \<grfn> (grfn_1) to another (grfn_2).
        The elements in the map are paired by their array index.
      required:
          - grfn_1
          - grfn_1_elements
          - grfn_2
          - grfn_2_elements
      properties:
        grfn_1:
          description: grfn_id for <grfn> source 1
          type: string  # grfn_id
        grfn_1_elements:
          description: Array of node_id or node_set_id from \<grfn> source 1
          type: array
          items:
            type: string # node_id or node_set_id
        grfn_2:
          description: grfn_id for \<grfn> source 2
          type: string  # grfn_id
        grfn_2_elements:
          description: Array of node_id or node_set_id from \<grfn> source 2
          type: array
          items:
            type: string # node_id or node_set_id

    node_set:
      title: <node_set>
      description: >
        A collection of FN node_ids from a source \<grfn>, used to denote to an
        arbitrary subset of the GrFN FN.
        A \<node_set> may have metadata associated with it.
      required:
        - node_set_id
        - grfn_id
        - nodes
      properties:
        node_set_id:
          description: Unique identifier.
          type: string
        grfn_id:
          description: The uid of the source \<grfn>.
          type: string
        nodes:
          description: >
            Array of uids representing \<variable> and/or \<function> nodes.
          type: array
          items:
            type: string
        # variable_nodes:
        #   description: Array of variable node indexed uids.
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/indexed_uid'
        # function_nodes:
        #   description: Array of function node uids.
        #   type: array
        #   items:
        #     type: string
        metadata:
          description: Metadata associated with the \<node_set>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'
