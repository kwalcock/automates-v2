openapi: 3.0.0

info:
  title: GrFN JSON Metadata spec
  description: >
    AutoMATES Grounded Function Network (GrFN) JSON Metadata schema specification
  contact:
    name: Clayton T. Morrison
    email: claytonm@arizona.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0

paths: {}

components:

  schemas:

    ### metadata

    metadata:
      title: <metadata>
      description: >
        Typed metadata consisting of an array of attribute-value pairs.
        \<grfn> is grounded through metadata.
      required:
        - type
        - attributes
        - provenance
      properties:
        type:
          description: Type of metadata.
          type: string
        provenance:
          $ref: '#/components/schemas/provenance'
        # attributes:
        #   description: Array of \<attribute> attribute-value pairs.
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/attribute'

    provenance:
      title: <provenance>
      description: Provenance of metadata.
      required:
        - method
        - timestamp
      properties:
        method:
          description: >
            The (top-level) inference method (with version) used to derive data.
          type: string
        timestamp:
          description: >
            Date and time that metadata was generated.
          type: string
          format: date-time
        # sources:
        #   description: >
        #     Array of sources.
        #     (TODO: add additional source types)
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/text_extraction_ref'

    attribute:
      title: <attribute>
      description: An attribute-value pair.
      required:
        - name
        - value
      properties:
        type:
          default: "attribute"
        name:
          description: The name of the attribute.
          type: string
        value:
          description: The value of the attribute.
          type: string

    ### Text extraction

    text_extraction:
      title: <text_extraction>
      description: Representation of text extraction.
      required:
        - source_type
        - document_reference_uid
        - text_location
      properties:
        source_type:
          type: string
          default: "text_document_source"
        document_reference_uid:
          description: uid of \<document_reference>
          type: string
        # text_location:
        #   $ref: '#/components/schemas/text_location'
        text_spans:
<<<<<<< HEAD
          $ref: '#/components/schemas/text_span_ref'
=======
          $ref: '#/components/schemas/text_span_ref_cosmos_coordinates'
>>>>>>> 67362770c66523fe775734f4920b72a77e859978

    # text_location:
    #   title: <text_location>
    #   description: Coordinates of text spans
    #   properties:
    #     spans:
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/text_span_ref'

    text_span_ref_cosmos_coordinates:
      title: <text_span_ref>
      description: >
        COSMOS within-document reference coordinates to a span of text.
      required:
        - page
        - block
        - span
      properties:
        page:
          type: integer
        block:
          type: integer
        span:
          $ref: '#/components/schemas/text_span'

    text_span:
      title: <text_span>
      description: Span of text
      required:
        - char_begin
        - char_end
      properties:
        char_begin:
          description: Character coordinate within a text block where span begins
          type: integer
        char_end:
          description: Character coordinate within a text block where span ends
          type: integer

    ### <ANY>.<code_span>

    code_span:
      allOf:
        - $ref: '#/components/schemas/metadata'
      title: <ANY>.<code_span>
      description: >
        Reference to a source code span (sub-line, line, block).
      properties:
        type:
          default: "code_span"
        code_type:
          description: >
            The role the the code reference in the span plays.
          type: string
          enum: [ IDENTIFIER, CODE_BLOCK ]
        code_file_reference_id:
          description: uid for the source code file \<code_file_reference>
          type: string
        line_begin:
          description: The line number where the identifier name string occurs
          type: integer
        line_end:
          description: The line number where the identifier name string occurs
          type: integer
        col_begin:
          description: The start column of the identifier name string instance
          type: integer
        col_end:
          description: The end column of the identifier name string instance
          type: integer

    ### <grfn>

    code_collection_reference:
      allOf:
        - $ref: '#/components/schemas/metadata'
      title: <grfn>.<code_collection_reference>
      description: Reference to a code collection (i.e., repository)
      required:
        - global_reference_id
        - files
      properties:
        type:
          default: "code_collection_reference"
        global_reference_id:
          description: >
            URL (e.g., GitHub url), or aske_id
          type: string
        files:
          description:: TODO
          type: array
          items:
            - $ref: '#/components/schemas/code_file_reference'

    code_file_reference:
      title: <code_file_reference>
      description: The reference to a specific file within a code collection
      properties:
        uid:
          description: uid for \<code_file_reference>
          type: string
        name:
          description: File name
          type: string
        path:
          description: Assume starting from root of code collection
          type: string

    textual_document_reference_set:
      allOf:
        - $ref: '#/components/schemas/metadata'
      title: <grfn>.<textual_document_reference_set>
      description: >
        host: \<grfn> <br>
        A reference to a textual document (e.g., documentation, scientific publication, etc.).
      required:
        - documents
      properties:
        type:
          default: "textual_document_references"
        documents:
          description: List of document references
          type: array
          items:
            $ref: '#/components/schemas/textual_document_reference'

    textual_document_reference:
      title: <textual_document_reference>
      description: Document reference.
      required:
        - uid
        - global_reference_id
      properties:
        uid:
          description: Unique identifier of the \<document_reference>
          type: string
        global_reference_id:
          description: >
            Identifier of source document.<br>
            Rank preference of identifier type:<br>
            (1) DOI (digital object identifier) recognized by COSMOS<br>
            (2) PMID (Pubmed ID) or other DOI<br>
            (3) aske_id (ASKE unique identifier)
          type: string
        cosmos_id:
          description: ID of COSMOS component used to process document.
          type: string
        cosmos_version_number:
          description: Version number of COSMOS component.
          type: string
        automates_id:
          description: ID of AutoMATES component used to process document.
          type: string
        automates_version_number:
          description: Version number of AutoMATES component.
          type: string
        bibjson:
          description: The bibjson entry for this document.<br>
          type: bibjson

    bibjson:
      title: <bibjson>
      description: See http://okfnlabs.org/bibjson/

    ### <type>

    type_alias:
      allOf:
        - $ref: '#/components/schemas/metadata'
      title: <type>.<type_alias>
      description: >
        host: \<type>
        Alias name of a \<type>. <br>
        (E.g., using C typedef as alternate alias name to a \<type>).
      required:
        - alias
      properties:
        type:
          default: "type_alias"
        alias:
          description: Alias name
          type: string

    ### <variable> | <function>

    text_definition:
      allOf:
        - $ref: '#/components/schemas/metadata'
      title: <variable,function>.<text_definition>
      description: >
        host: { \<variable>, \<function> } <br>
        Definition of host derived from a text source.<br>
        Example: "attributes": { "text_identifier": "Î³", "text_definition": "gamma" }
      required:
        - attributes
      properties:
        type:
          default: "text_definition"
        text_extraction:
          $ref: '#/components/schemas/text_extraction'
        attributes:
          description: Array of \<attribute> attribute-value pairs.
          type: array
          items:
            $ref: '#/components/schemas/attribute'

    # are these test-based, or are they parameter-code-based ?
    text_parameter:
      allOf:
        - $ref: '#/components/schemas/metadata'
      title: <variable>.<text_parameter>
      description: >
        host: \<variable> <br>
        Association of parameter values extracted from text to host \<variable>.
      required:
        - attributes
      properties:
        type:
          default: "text_parameter"
        text_extraction:
          $ref: '#/components/schemas/text_extraction'
        parameter_association:
          description: Association of a parameter value with a variable.
          $ref: '#/components/schemas/attribute'

    ### <variable>

    measurement_scale:
      allOf:
        - $ref: '#/components/schemas/metadata'
      title: <variable>.<measurement_scale>
      description: >
        host: \<variable> <br>
        The measurement scale of \<variable> value.<br>
      required:
        - measurement_scale
      properties:
        type:
          default: "measurement_scale"
        measurement_scale:
          description: >
            Values: \"binary\", \"categorical\", \"continuous\"
          type: string
          enum: [ BINARY, CATEGORICAL, CONTINUOUS ]

    value_domain:
      allOf:
        - $ref: '#/components/schemas/metadata'
      title: <variable>.<value_domain>
      description: >
        host: \<variable> <br>
        Expression of the possible values data can take, as interval.<br>
      required:
        - value_domain
      properties:
        type:
          default: "value_domain"
        value_domain:
          description: >
            Example\: \"(and (> v -infty) (< v infty))\"
          type: string
