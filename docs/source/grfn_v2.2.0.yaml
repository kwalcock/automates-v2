openapi: 3.0.0

info:
  title: GrFN spec
  description: AutoMATES Grounded Function Network (GrFN)JSON schema specification
  contact:
    name: Clayton T. Morrison
    email: claytonm@email.arizona.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 2.2.0

paths: {}

components:

  schemas:

    grfn:
      title: <grfn>
      description: >
        Top-level GrFN structure.
        A <grfn_def> corresponds to a namespace.
      required:
        - uid
        - timestamp
        - functions
        - variables
        - edges
        - subgraphs
      properties:
        uid:
          description: GrFN unique identifier
          type: string
        timestamp:
          description: >
            Date and time that current GrFN was generated.
          type: string
          format: date-time
        types:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/type'
              - $ref: '#/components/schemas/type__composite'
        objects:
          type: array
          items:
            $ref: '#/components/schemas/object'
        variables:
          type: array
          items:
            $ref: '#/components/schemas/variable'
        functions:
          type: array
          items:
            $ref: '#/components/schemas/function'
        hyper_edges:
          type: array
          items:
            $ref: '#/components/schemas/hyper_edge'
        subgraphs:
          type: array
          items:
            $ref: '#/components/schemas/subgraph'
        # metadata
        metadata:
          description: Metadata associated with \<grfn>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    hyper_edge:
      title: <hyper_edge>
      description: GrFN hyper_edge
      required:
      - inputs
      - function
      - outputs
      properties:
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/variable'
        function:
          $ref: '#/components/schemas/function'
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/variable'

    ### user-defined types

    type:
      title: <type>
      description: Base type
      required:
        - uid
        - name
        - metatype
      properties:
        uid:
          description: Unique identifier.
          type: string
        name:
          description: Name of the data type
          type: string
        metatype:
          description: Metatype of type.
          type: string
        metadata:
          description: Metadata associated with the \<type> declaration.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    type__composite:
      allOf:
        - $ref: '#/components/schemas/type'
      title: <type>:<composite>
      description: A structured type with named field attributes.
      required:
        - fields
      properties:
        metatype:
          type: string
          default: "COMPOSITE"
        fields:
          description: Array of named fields.
          type: array
          items:
            $ref: '#/components/schemas/named_field'

    named_field:
      title: <named_field>
      description: >
        A named field, pairing the field name (string) with [optional]
        field value type name (string).
        When no type specified, the type name is null.
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          type: string
        metadata:
          type: array
          description: Metadata associated with the \<object> instance.
          items:
            $ref: '#/components/schemas/metadata'

    object:
      title: <object>
      description: >
        An object an instance of a \<type> where fields are instantiated
        as persistent storage with associated values.
        Each field is represented by a variable.
      properties:
        uid:
          description: Unique identifier object.
          type: string
        type:
          description: uid of the \<object>'s \<type>
          type: string
        field_refs:
          description: >
            Array of name-value pairs (attributes). Used to represent associations of fields (composite) or keys (dictionary) with values. Values will be strings reprenting the uids of objects representing the value.
          type: array
          items:
            $ref: '#/components/schemas/attribute'
        metadata:
          type: array
          description: Metadata associated with the \<object> instance.
          items:
            $ref: '#/components/schemas/metadata'

    object__dictionary:
      allOf:
        - $ref: '#/components/schemas/object'
      title: <object>:<dictionary>
      description: >
        Object with known keys
      properties:
        type:
          type: string
          default: "DICTIONARY"
        known_keys:
          description: Array of known keys (strings)
          type: array
          items:
            type: string

    attribute:
      title: <attribute>
      description: An attribute-value pair.
      required:
        - name
        - value
      properties:
        type:
          default: "attribute"
        name:
          description: The name of the attribute.
          type: string
        value:
          description: The value of the attribute.
          type: string

    variable:
      title: <variable>
      description: A representation of a variable extracted from source code
      required:
        - identifier
        - uid
        - reference
      properties:
        identifier:
          description: (name) Variable basename and index extracted from source code
          type: string
        uid:
          description: Variable unique identifier
          type: string
        object_ref:
          description: uid of host object (if applicable)
          type: string
        data_type:
          description: >
            Primitive data types:<br>
            <em>Atomic</em>: \"BOOLEAN\", \"INTEGER\", \"FLOAT\", \"STRING\"<br>
            <em>Compound</em>: \"SET\", \"SEQUENCE\", \"DICTIONARY\", \"COMPOSITE\"
          type: string
          enum: [ BOOLEAN, INTEGER, FLOAT, STRING, SET, SEQUENCE, DICTIONARY, COMPOSITE ]

        # The following are moved to metadata
        # kind:
        #   description: (measurement_scale) The measurement scale of this data-type binary/categorical/discrete/continuous
        #   type: string
        # domain:
        #   description: >
        #     Expression of the possible values data can take, as interval
        #     \"(and (> v -infty) (< v infty))\"
        #   type: string
        # reference:
        #   description: Grounding reference to scientific variable ontology
        #   type: string

        # metadata
        metadata:
          description: Metadata associated with \<variable>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    function:
      title: <function>
      description: A representation of a functional computation extracted from source code
      required:
        - uid
        - type
        # - reference
        - lambda
      properties:
        uid:
          description: Function unique identifier
          type: string
        type: # pass, literal, assignment, condition, decision
          description: >
            States the type of function being computed by this function node<br>
            <em>Function interface</em>: \"INTERFACE\" <br>
            <em>compound object reference</em>: [ \"EXTRACT\", \"PACK\" ] <br>
            <em>executable + instances (wiring)</em>: [ \"LITERAL\", \"ASSIGN\", \"CONDITION\", \"DECISION\" ]
          type: string
          enum: [ INTERFACE, EXTRACT, PACK, LITERAL, ASSIGN,  CONDITION, DECISION ]
        # reference:
        #   description: Grounding reference to scientific variable ontology
        #   type: string
        lambda:
          description: Stringified pythonic version of the lambda function code
          type: string
        # metadata
        metadata:
          description: Metadata associated with \<grfn>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    subgraph:
      title: <subgraph>
      description: >
        TODO
      required:
        - uid
        - parent
        - basename
        - nodes
      properties:
        uid:
          description: Subgraph unique identifier
          type: string
        parent:
          description: the container uid for the parent container to this container
          type: string
        basename:
          description: >
            A reference to the container that shows the original module path, scope path, and container name
          type: string
        namespace:
          description: The namespace path of the subgraph
          type: string
        scope:
          description: The scope path of the subgraph
          type: string
        occurrence_num:
          description: The subgraph instance tag
          type: string
        type:
          description: >
            \"FuncContainer\", \"CondContainer\", \"LoopContainer\"
          type: string
          enum: [ FuncContainer, CondContainer, LoopContainer ]
        exit:
          description: >
            A function unique identifier for the lambda function that computes the exit condition
          type: string
        nodes:
          description: >
            Array of uids referring to variables and functions in the subgraph
          type: array
          items:
            type: string
        # metadata
        metadata:
          description: Metadata associated with \<subgraph>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    ### metadata

    metadata:
      title: <metadata>
      description: >
        Typed metadata consisting of an array of attribute-value pairs.
        \<grfn> is grounded through metadata.<br>
        See grfn_openapi_metadata
