openapi: 3.0.0

info:
  title: GrFN JSON spec
  description: AutoMATES Grounded Function Network (GrFN) JSON schema specification
  contact:
    name: Clayton T. Morrison
    email: claytonm@arizona.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 3.0.0

paths: {}

components:

  schemas:

    ### grfn

    grfn:
      title: <grfn>
      description: >
        Top-level GrFN structure.
        A \<grfn> corresponds to a namespace.
        \<grfn> may have metadata associated with it.
        Each \<grfn> will have its own JSON file.
      required:
        - uid
        # - entry_point  # Can be 1 or 0, but not more than one
        - types
        - objects
        - variables
        - functions
        - hyper_edges
        - metadata
      properties:
        # id
        uid:
          description: Unique identifier
          type: string
          format: uid

        # Root function
        entry_point:
          description: >
            uid for the top-level/root entry point to the GrFN.
            There can be 1 or 0 (null) entry points, but not more than one.
            There is a separate GrFN for each entry point.
          type: string
          format: uid

        # Types
        types:
          description: Type definitions
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/type'
              - $ref: '#/components/schemas/type__composite'
        objects:
          description: Instances of types
          type: array
          items:
            $ref: '#/components/schemas/object'

        # Function Network Definitions
        variables: # node
          description: >
            Array of \<variable> definitions.
          type: array
          items:
            $ref: '#/components/schemas/variable'
        functions:  # hyperedge and subgraph
          description: >
            Array of \<function> definitions.
          type: array
          items:
            $ref: '#/components/schemas/function'

        # metadata
        metadata:
          description: Metadata associated with \<grfn>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    ### Types

    type:
      title: <type>
      description: Base type
      required:
        - uid
        - name
        - metatype
      properties:
        uid:
          description: Unique identifier.
          type: string
          format: uid
        name:
          description: Name of the \<type>
          type: string
        metatype:
          description: Designation of the type (metatype) of this type.
          type: string
          default: "BASE_TYPE"
        metadata:
          description: Metadata associated with the \<type> declaration.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    type__composite:
      allOf:
        - $ref: '#/components/schemas/type'
      title: <type>:<composite>
      description: A structured type with named field attributes.
      required:
        - fields
      properties:
        metatype:
          type: string
          default: "COMPOSITE"
        fields:
          description: Array of named fields (named attributes).
          type: array
          items:
            $ref: '#/components/schemas/named_field'

    named_field:
      title: <named_field>
      description: >
        A named field, pairing the field name (string) with [optional]
        field value type name (string).
        When no type specified, the type name is null.
      required:
        - name
        - type
      properties:
        name:
          description: Name of the field.
          type: string
        type:
          description: uid of the the \<type> of the field.
          type: string
          format: uid
        metadata:
          type: array
          description: Metadata associated with the \<object> instance.
          items:
            $ref: '#/components/schemas/metadata'

    object:
      title: <object>
      description: >
        An object is an instance of a \<type>.
        If the object has fields, they are "instantiated"
        (as persistent storage with associated values).
        Each field is represented by a \<variable>.
      properties:
        uid:
          description: Unique identifier.
          type: string
          format: uid
        type:
          description: uid of the \<object>'s \<type>
          type: string
          format: uid
        field_values:
          description: >
            Array of named fields paired with values (field_value).
            Used to represent associations of fields (composite) or
            keys (dictionary) with values. Values will be strings
            reprenting the uids of objects representing the value.
          type: array
          items:
            $ref: '#/components/schemas/field_value'
        metadata:
          type: array
          description: Metadata associated with the \<object> instance.
          items:
            $ref: '#/components/schemas/metadata'

    field_value:
      title: <field_value>
      description: A named field-value pair.
      required:
        - name
        - value
      properties:
        name:
          description: The name of the field.
          type: string
        value:
          description: >
            The value bound to the field.<br>
            TODO: Generalize representation of value (object?)
          type: string

    object__dictionary:
      allOf:
        - $ref: '#/components/schemas/object'
      title: <object>:<dictionary>
      description: >
        Object with known keys
      properties:
        type:
          type: string
          default: "DICTIONARY"
        known_keys:
          description: Array of known keys (strings)
          type: array
          items:
            type: string

    ### Function Network Components

    variable:
      title: <variable>
      description: >
        A representation of a variable.
        A \<variable> can represent an abstraction by reference to an \<object> (e.g., representing a set, array, struct).
      # Case 1: set of variables: e.g., defines an array;
      # Case 2: random variable: function->variable
      required:
        - uid
        - name
        - metadata
      properties:
        uid:
          description: Unique identifier.
          type: string
          format: uid
        object_ref:
          description: uid of object.
          type: string
          format: uid
        name:
          description: >
            Variable basename.
          # and index.
            Typically derived from the source code identifier.
          type: string
        metadata:
          description: Metadata associated with the \<variable>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    function:
      title: <function>
      description: >
        A representation of a function (transforms state).
        A \<function> is a hyperedge between \<variable>s
        and a subgraph of a Function Network (FN).
      required:
        - uid
        - type
        - hyper_edges
        - metadata
      properties:
        uid:
          description: Unique identifier.
          type: string
          format: uid
        identifier:
          description: The name of the function
          type: string
        type:
          description: >
            The type of function being computed by this \<function> node.<br>
            The following are three groups of types:<br>
            <em>Compound object reference</em>: [ \"EXTRACT\", \"PACK\" ]<br>
            <em>executable + instances (wiring)</em>: [ \"OPERATOR\", \"LITERAL\", \"ASSIGN\", \"CONDITION\", \"DECISION\" ]<br>
            <em>containers</em>: [ \"CONTAINER\", \"CONDITIONAL\", \"LOOP\" ]
          type: string
          enum: [ EXTRACT, PACK,
                  OPERATOR, LITERAL, ASSIGN,  CONDITION, DECISION,
                  CONTAINER, CONDITIONAL, LOOP ]
        input_variables:
          description: >
            Array of zero or more uids for variables within the function body.<br>
            Order of variables will match BOTH:<br>
            (1) The order of the parent \<hyper_edge> input variable uids<br>
            (2) The order of the inputs to the executable expression lambda function.
          type: array
          items:
            type: string
            format: uid
        output_variables:
          description: >
            Array of zero or more uids for variables within the function body.<br>
            Order of variables will match BOTH:<br>
            (1) The order of the parent \<hyper_edge> output variable uids<br>
            (2) The order of the outputs in the return tuple of the executable expression lambda function.
          type: array
          items:
            type: string
            format: uid
        expression:
          description: >
            Executable expression.
            Stringified pythonic version of the lambda function code
          type: string
        exit:
          description: >
            Only used in loop type.
            Unique identifier for the lambda function that computes the exit condition.
          type: string
        hyper_edges:
          description: >
            Array of \<hyper_edge>s representing the body of the function
          type: array
          items:
            $ref: '#/components/schemas/hyper_edge'
        metadata:
          type: array
          description: Metadata associated with the \<function>.
          items:
            $ref: '#/components/schemas/metadata'

    hyper_edge:
      title: <hyper_edge>
      description: Function Network directed hyper edge
      required:
        - input_variables
        - function_uid
        - output_variables
      properties:
        input_variables:
          description: Array of uids for all input \<variable>s
          type: array
          items:
            type: string
            format: uid
        function_uid:
          description: uid of \<function>
          type: string
          format: uid
        output_variables:
          description: Array of uids for all output \<variable>s
          type: array
          items:
            type: string
            format: uid

    ### metadata

    metadata:
      title: <metadata>
      description: >
        Typed metadata consisting of an array of attribute-value pairs.
        \<grfn> is grounded through metadata.<br>
        See grfn_openapi_metadata


    ### grfn_collection

    grfn_collection:
      title: <grfn_collection>
      description: >
        A collection of 1 or more \<grfn>.
        \<node_set>s denote arbitrary subsets of \<grfn>.
        A collection with an \<alignment> will have at least two \<grfn>.
        Each \<grfn_collection> will have its own JSON file.
      required:
        - grfns
      properties:
        grfns:
          description: Array of \<grfn> ids.
          type: array
          items:
            type: string
            format: uid
        alignments:
          type: array
          items:
            $ref: '#/components/schemas/alignment'
        node_sets:
          type: array
          items:
            $ref: '#/components/schemas/node_set'

    alignment:
      title: <alignment>
      description: >
        A mapping of elements (node_ids or \<node_sets>)
        from one \<grfn> (grfn_1) to another (grfn_2).
        The elements in the map are paired by their array index.
      required:
          - grfn_1
          - grfn_1_elements
          - grfn_2
          - grfn_2_elements
      properties:
        grfn_1:
          description: uid for <grfn> source 1
          type: string  # grfn_id
          format: uid
        grfn_1_elements:
          description: Array of uids for node_id or node_set_id from \<grfn> source 1
          type: array
          items:
            type: string # node_id or node_set_id
            format: uid
        grfn_2:
          description: grfn_id for \<grfn> source 2
          type: string  # grfn_id
          format: uid
        grfn_2_elements:
          description: Array of uids for node_id or node_set_id from \<grfn> source 2
          type: array
          items:
            type: string # node_id or node_set_id
            format: uid

    node_set:
      title: <node_set>
      description: >
        A collection of FN node_ids from a source \<grfn>, used to denote to an
        arbitrary subset of the GrFN FN.
        A \<node_set> may have metadata associated with it.
      required:
        - node_set_id
        - grfn_id
        - nodes
      properties:
        node_set_id:
          description: Unique identifier.
          type: string
          format: uid
        grfn_id:
          description: The uid of the source \<grfn>.
          type: string
          format: uid
        nodes:
          description: >
            Array of uids representing \<variable> and/or \<function> nodes.
          type: array
          items:
            type: string
            format: uid
        metadata:
          description: Metadata associated with the \<node_set>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'
